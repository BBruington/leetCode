datasource db {
  //provider is  what interprets the schema
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src"
}

model TodoItem {
  id   Int     @id @default(autoincrement())
  text String
  done Boolean
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

//UserPreference and User have a 1 to 1 relation due to the @unique
//tag on UserPreference userId. aka a User may only have 1 UserPreference

//uuid makes data more secure due to more random id
model User {
  id             String          @id @default(uuid())
  age            Int
  name           String
  email          String          @unique
  //role         Role            @default(BASIC)
  isAdmin        Boolean? //? means it's optional
  writtenPosts   Post[]          @relation("WrittenPosts")
  //Post[] array means it can contain multiple posts
  favoritePosts  Post[]          @relation("FavoritePosts")
  //label helps reference what favoritePosts points to
  //this is needed if a model points to another twice and needs
  //to differentiate 
  UserPreference UserPreference?
  //double @@ states we CANT have 2 Users with same name AND age

  @@unique([age, name])
  @@index([email])
}

//User has a 1 to many relation to Post meaning one user can have
//multiple posts

model Post {
  id            String     @id @default(uuid())
  title         String
  rating        Float //float = soft decimal
  createdAt     DateTime   @default(now()) //sets createdAt to now upon creation
  updatedAt     DateTime   @updatedAt //auto updates
  //you can giv relations labels to help relate to others
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String //aka the id is linked to user like a bridge
  //in this example, a user of a single id can make a post and
  //it gets linked to user's id
  favoritedBy   User?      @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[]
}

//Post has a many to many relation to Category meaning both can
//have many of one another

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

//current using provider doesn't support enums but can be used for things 
//like roles

// enum Role {
//   BASIC
//   ADMIN
// }
